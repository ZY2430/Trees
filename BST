BinarySearchTree
public class BinarySearchTree {


    private Node root;

    public BinarySearchTree(){
        root = null;
    }

    public void add(Comparable obj){
        Node newNode = new Node();
        newNode.data = obj;
        newNode.left = null;
        newNode.right = null;
        if(root == null){
            root = newNode;
        }
       else{
           root.addNode(newNode);
        }
    }


    public boolean find(Comparable obj){
        Node current = root;

        while(current != null){
            int c = current.data.compareTo(obj);
            if(c == 0){
                return true;
            }
            else if(c > 0){//current node larger than obj
                current =current.left;
            }
            else{
                current = current.right;
            }
        }
        return false;
    }


    public void remove(Comparable obj){
        Node toBeRemoved = root;
        Node parent = null;
        boolean found = false;
        while(found != true && toBeRemoved != null){
            int d = toBeRemoved.data.compareTo(obj);

            if(d == 0){
                found = true;
            }
            else{
                parent = toBeRemoved;
                if(d <0){
                    toBeRemoved = toBeRemoved.right;
                }
                else{
                    toBeRemoved = toBeRemoved.right;
                }
            }
            if(!found){
                return;
            }

            if(toBeRemoved.left == null || toBeRemoved.right == null){
                Node newChild;
                if(toBeRemoved.left == null){
                    newChild = toBeRemoved.right;
                }
                else {
                    newChild = toBeRemoved.left;
                }

                if(parent == null){
                    root = toBeRemoved;
                }
                else if(parent.left == toBeRemoved){
                    parent.left = newChild;
                }
                else{
                    parent.right = newChild;
                }
                return;
            }

            //Neither subtree is empty
            //Find the smallest node in the right subtree;
            Node smallestParent = toBeRemoved;
            Node smallest = toBeRemoved.right;
            while(smallest.left != null){
                smallestParent = smallest;
                smallest = smallest.left;
            }
            toBeRemoved.data = smallest.data;
            if(smallestParent == toBeRemoved){
                smallestParent.right = smallest.right;
            }
            else{
                smallestParent.left = smallest.right;
            }
        }
    }

    public void print(){
        print(root);
        System.out.println();
    }

    public static void print(Node parent){
        if(parent == null){
            return;
        }
        print(parent.left);
        System.out.print(parent.data + " ");
        print(parent.right);
    }

    class Node{
        public Comparable data;
        public Node left;
        public Node right;


        public void addNode(Node n){
           int comp = n.data.compareTo(data);
           if(comp >0){
               if(right == null){
                  right = n;
               }
               else{
                   right.addNode(n);
               }
           }

           if(comp <0){
               if(left == null){
                   left =n;
               }
               else{
                   right.addNode(n);
               }
           }
        }
    }
}
